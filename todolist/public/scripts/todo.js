//For the editable text of the todo through clicking on it
//Clicking out will save the changes
var ContentEditable = React.createClass({
    render: function(){
      //render the span with input and blur changes, as well as shouldcomponentupdate
        return <span id={this.props.html.__idtodo}
            className="todotext" 
            onInput={this.emitChange} 
            onBlur={this.sendChange}
            contentEditable
            dangerouslySetInnerHTML={this.props.html}></span>;
    },
    shouldComponentUpdate: function(nextProps){
        return nextProps.html !== ReactDOM.findDOMNode(this).innerHTML;
    },
    sendChange: function(){
      //if change is sent, ajax request will be made to change it in the backend
        var html = ReactDOM.findDOMNode(this).innerHTML;
        var id = ReactDOM.findDOMNode(this).getAttribute("id")
        var text = html.replace(/(<p[^>]+?>|<p>|<\/p>)/img, "");
        var text_final = text.replace("\n","");
        if (this.props.onChange && html !== this.lastHtml) {
            this.props.onChange({
                target: {
                    value: html
                }
            });
        }
        this.lastHtml = html;
        $.ajax({
            url: "/api/todos/"+id,
            dataType: 'json',
            type: 'POST',
            data: {'todoitem' : text_final}
        });
    },
    emitChange: function(){
      //else, just change it on the frontend
        var html = ReactDOM.findDOMNode(this).innerHTML;
        if (this.props.onChange && html !== this.lastHtml) {
            this.props.onChange({
                target: {
                    value: html
                }
            });
        }
        this.lastHtml = html;
    }
});

//if done button is clicked, the html is updated with the new version of data
var DoneButton = React.createClass({
    render: function(){
        return <button id={this.props.html.__idtodo} onClick={this.deletetodo}>
          <span>X</span>
        </button>
    },
    deletetodo: function(){
        var id = ReactDOM.findDOMNode(this).getAttribute("id") //gets the id of the completed button
        $.ajax({
            url: "/api/todos/completed/"+id,
            dataType: 'json',
            type: 'POST',
            success: function(data) {
              this.props.html.__this_parent.onUpdate(data); //update html
            }.bind(this)
        });
    }
});

//The markup and class of each todo
var Todo = React.createClass({
  rawMarkup: function() {
    var this_parent = this.props.children[1]; //gets the parent props (includes all of the collector functions)
    var rawMarkup = marked(this.props.children[0].todoitem.toString(), {sanitize: true}); //rawmarkup of all itemss
    var idtodo = this.props.children[0]._id; //id of all of the kids
    return { __html: rawMarkup, __idtodo: idtodo, __this_parent: this_parent}; //return this as rawmarkup
  },
  render: function() {
      var handleChange = function(event){
        this.setState({html: event.target.value});
      }.bind(this);
    return (
      //creates each individual todo item with done button on left and contenteditable span on the right
      <div className="todo">
        <div id="progress-button" className="progress-button">
          <DoneButton html={this.rawMarkup()}/>
        </div>
        <ContentEditable html={this.rawMarkup()} onChange={handleChange} />
        <br/>
      </div>
    );
  }
});


//ENTIRE TODO BOX:
var TodoBox = React.createClass({
  onUpdate: function(val) {
    //update function that takes in new version of data
      this.setState({
          data: val
      });
  },
  loadTodosFromServer: function() {
    //grabs all data from the backend
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      cache: false,
      success: function(data) {
        this.setState({data: data});
      }.bind(this),
      error: function(xhr, status, err) {
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  handleTodoSubmit: function(todo) {
    var todos = this.state.data;
    // Optimistically set an id on the new todo. It will be replaced by an
    // id generated by the server. In a production application you would likely
    // not use Date.now() for this and would have a more robust system in place.
    var newTodos = todos.concat([todo]);
    this.setState({data: newTodos});
    //makes post request of all of the data and sets the todolist as this
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      type: 'POST',
      data: todo,
      success: function(data) {
        this.setState({data: data});
      }.bind(this),
      error: function(xhr, status, err) {
        this.setState({data: todos});
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  getInitialState: function() {
    return {data: []};
  },
  componentDidMount: function() {
    this.loadTodosFromServer();
  }, //ALL THE DIFFERENT FILTERS:
  showAll: function() { //shows ALL of the todos
    $.ajax({
      url: this.props.url+"/all/",
      dataType: 'json',
      type: 'GET',
      success: function(data) {
        this.setState({data: data});
      }.bind(this),
      error: function(xhr, status, err) {
        this.setState({data: todos});
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  showAllActive: function() { //shows only the active ones
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      type: 'GET',
      success: function(data) {
        this.setState({data: data});
      }.bind(this),
      error: function(xhr, status, err) {
        this.setState({data: todos});
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  showAllCompleted: function() { //shows only the completed ones
    $.ajax({
      url: this.props.url+"/completed/",
      dataType: 'json',
      type: 'GET',
      success: function(data) {
        this.setState({data: data});
      }.bind(this),
      error: function(xhr, status, err) {
        this.setState({data: todos});
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  render: function() {
    //the render of the entire todobox
    return (
      <div className="todoBox">
        <h1>To Do List
        <div id="filter-button" className="filter-button">
          <button onClick={this.showAll}>All</button>
        </div>
        <div id="filter-button" className="filter-button">
          <button onClick={this.showAllActive}>Active</button>
        </div>
        <div id="filter-button" className="filter-button">
          <button onClick={this.showAllCompleted}>Completed</button>
        </div>
        </h1>
        <TodoForm onTodoSubmit={this.handleTodoSubmit} />
        <TodoList srcs={this} data={this.state.data} />
      </div>
    );
  }
});

//todolist is the list of todos in the whole todobox
var TodoList = React.createClass({
  render: function() {
    var parent_this = this.props.srcs;
    var todoNodes = this.props.data.map(function(todo, index) {
      return (
        <Todo author="cynthia" key={index}>
          {todo}{parent_this}
        </Todo>
      );
    });
    return (
      <div className="TodoList">
        {todoNodes}
      </div>
    );
  }
});


//todoform is the top form that will add this to the top of the todolist
var TodoForm = React.createClass({
  getInitialState: function() {
    return {todoitem: ''};
  },
  handleTextChange: function(e) {
    this.setState({todoitem: e.target.value});
  },
  handleSubmit: function(e) {
    //the submit will use the parent ontodosubmit to update the frontend
    e.preventDefault();
    var todoitem = this.state.todoitem.trim();
    if (!todoitem) {
      return;
    }
    this.props.onTodoSubmit({todoitem: todoitem});
    this.setState({todoitem: ''});
  },
  render: function() {
    return (
      //The render of the form on the top with the onsubmit targeting handleSubmit
      <form className="todoForm basic-grey" onSubmit={this.handleSubmit}>
        <input
          type="text"
          placeholder="To Do Item"
          value={this.state.todoitem}
          onChange={this.handleTextChange}
        />
        <input type="submit" value="Post" />
      </form>
    );
  }
});

ReactDOM.render(
  <TodoBox url="/api/todos" pollInterval={2000} />,
  document.getElementById('content')
);
